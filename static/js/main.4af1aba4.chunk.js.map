{"version":3,"sources":["components/ui/slider.js","components/ui/button.js","DotImageConverter.jsx","App.js","index.js"],"names":["Slider","_ref","min","max","step","value","onChange","_jsx","type","style","width","Button","children","onClick","className","DotImageConverter","image","setImage","useState","resolution","setResolution","dotSize","setDotSize","canvasRef","useRef","canvasSize","useEffect","current","canvas","ctx","getContext","height","imageSmoothingEnabled","clearRect","tempCanvas","document","createElement","tempCtx","drawImage","imageData","getImageData","pixelSize","y","x","i","fillStyle","concat","data","drawSize","offsetX","offsetY","fillRect","_jsxs","accept","e","file","target","files","reader","FileReader","onload","event","img","Image","src","result","readAsDataURL","parseInt","toFixed","parseFloat","ref","handleExport","link","download","href","toDataURL","click","App","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4af1aba4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Slider = ({ min, max, step, value, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      value={value}\r\n      onChange={onChange}\r\n      style={{ width: '100%' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\n\r\nconst Button = ({ children, onClick }) => {\r\n  return (\r\n    <button onClick={onClick} className=\"btn\">\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport Slider from './components/ui/slider';\r\nimport Button from './components/ui/button';\r\n\r\nconst DotImageConverter = () => {\r\n  const [image, setImage] = useState(null);\r\n  const [resolution, setResolution] = useState(64);\r\n  const [dotSize, setDotSize] = useState(1);\r\n  const canvasRef = useRef(null);\r\n  const canvasSize = 512;\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        setImage(img);\r\n      };\r\n      img.src = event.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (image && canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n      \r\n      canvas.width = canvasSize;\r\n      canvas.height = canvasSize;\r\n      \r\n      ctx.imageSmoothingEnabled = false;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      const tempCanvas = document.createElement('canvas');\r\n      tempCanvas.width = resolution;\r\n      tempCanvas.height = resolution;\r\n      const tempCtx = tempCanvas.getContext('2d');\r\n      tempCtx.drawImage(image, 0, 0, resolution, resolution);\r\n      \r\n      const imageData = tempCtx.getImageData(0, 0, resolution, resolution);\r\n      \r\n      const pixelSize = canvasSize / resolution;\r\n      \r\n      for (let y = 0; y < resolution; y++) {\r\n        for (let x = 0; x < resolution; x++) {\r\n          const i = (y * resolution + x) * 4;\r\n          ctx.fillStyle = `rgb(${imageData.data[i]},${imageData.data[i+1]},${imageData.data[i+2]})`;\r\n          \r\n          const drawSize = pixelSize * dotSize;\r\n          const offsetX = (pixelSize - drawSize) / 2;\r\n          const offsetY = (pixelSize - drawSize) / 2;\r\n          ctx.fillRect(x * pixelSize + offsetX, y * pixelSize + offsetY, drawSize, drawSize);\r\n        }\r\n      }\r\n    }\r\n  }, [image, resolution, dotSize]);\r\n\r\n  const handleExport = () => {\r\n    if (canvasRef.current) {\r\n      const link = document.createElement('a');\r\n      link.download = 'dot-image.png';\r\n      link.href = canvasRef.current.toDataURL();\r\n      link.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-md mx-auto\">\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} className=\"mb-4\" />\r\n      <div className=\"slider-container\">\r\n        <label>解像度: {resolution}x{resolution}</label>\r\n        <Slider\r\n          min={16}\r\n          max={256}\r\n          step={16}\r\n          value={resolution}\r\n          onChange={(e) => setResolution(parseInt(e.target.value))}\r\n        />\r\n      </div>\r\n      <div className=\"slider-container\">\r\n        <label>ドットサイズ: {dotSize.toFixed(2)}</label>\r\n        <Slider\r\n          min={0.1}\r\n          max={1}\r\n          step={0.05}\r\n          value={dotSize}\r\n          onChange={(e) => setDotSize(parseFloat(e.target.value))}\r\n        />\r\n      </div>\r\n      <canvas \r\n        ref={canvasRef} \r\n        className=\"border border-gray-300 mb-4\" \r\n        width={canvasSize} \r\n        height={canvasSize} \r\n        style={{ width: '100%', height: 'auto' }}\r\n      />\r\n      <Button onClick={handleExport}>画像を出力</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DotImageConverter;\r\n","import React from 'react';\r\nimport DotImageConverter from './DotImageConverter';\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DotImageConverter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}