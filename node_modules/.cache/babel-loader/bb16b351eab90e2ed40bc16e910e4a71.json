{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nishi\\\\OneDrive\\\\\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\\\VSCode\\\\Dot-Image-Converter\\\\src\\\\DotImageConverter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Slider from './components/ui/slider';\nimport Button from './components/ui/button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DotImageConverter = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [resolution, setResolution] = useState(64);\n  const [dotSize, setDotSize] = useState(1);\n  const canvasRef = useRef(null);\n  const canvasSize = 512;\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const img = new Image();\n      img.onload = () => {\n        setImage(img);\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(file);\n  };\n  useEffect(() => {\n    if (image && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      canvas.width = canvasSize;\n      canvas.height = canvasSize;\n      ctx.imageSmoothingEnabled = false;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = resolution;\n      tempCanvas.height = resolution;\n      const tempCtx = tempCanvas.getContext('2d');\n      tempCtx.drawImage(image, 0, 0, resolution, resolution);\n      const imageData = tempCtx.getImageData(0, 0, resolution, resolution);\n      const pixelSize = canvasSize / resolution;\n      for (let y = 0; y < resolution; y++) {\n        for (let x = 0; x < resolution; x++) {\n          const i = (y * resolution + x) * 4;\n          ctx.fillStyle = `rgb(${imageData.data[i]},${imageData.data[i + 1]},${imageData.data[i + 2]})`;\n          const drawSize = pixelSize * dotSize;\n          const offsetX = (pixelSize - drawSize) / 2;\n          const offsetY = (pixelSize - drawSize) / 2;\n          ctx.fillRect(x * pixelSize + offsetX, y * pixelSize + offsetY, drawSize, drawSize);\n        }\n      }\n    }\n  }, [image, resolution, dotSize]);\n  const handleExport = () => {\n    if (canvasRef.current) {\n      const link = document.createElement('a');\n      link.download = 'dot-image.png';\n      link.href = canvasRef.current.toDataURL();\n      link.click();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-md mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload,\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u89E3\\u50CF\\u5EA6: \", resolution, \"x\", resolution]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        min: 16,\n        max: 256,\n        step: 16,\n        value: resolution,\n        onChange: e => setResolution(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u30C9\\u30C3\\u30C8\\u30B5\\u30A4\\u30BA: \", dotSize.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        min: 0.1,\n        max: 1,\n        step: 0.05,\n        value: dotSize,\n        onChange: e => setDotSize(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"border border-gray-300 mb-4\",\n      width: canvasSize,\n      height: canvasSize,\n      style: {\n        width: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleExport,\n      children: \"\\u753B\\u50CF\\u3092\\u51FA\\u529B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(DotImageConverter, \"6lOD2/3ySrmGz1qhXjdRJpH11cs=\");\n_c = DotImageConverter;\nexport default DotImageConverter;\nvar _c;\n$RefreshReg$(_c, \"DotImageConverter\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Slider","Button","jsxDEV","_jsxDEV","DotImageConverter","_s","image","setImage","resolution","setResolution","dotSize","setDotSize","canvasRef","canvasSize","handleImageUpload","e","file","target","files","reader","FileReader","onload","event","img","Image","src","result","readAsDataURL","current","canvas","ctx","getContext","width","height","imageSmoothingEnabled","clearRect","tempCanvas","document","createElement","tempCtx","drawImage","imageData","getImageData","pixelSize","y","x","i","fillStyle","data","drawSize","offsetX","offsetY","fillRect","handleExport","link","download","href","toDataURL","click","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","min","max","step","value","parseInt","toFixed","parseFloat","ref","style","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nishi/OneDrive/ドキュメント/VSCode/Dot-Image-Converter/src/DotImageConverter.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Slider from './components/ui/slider';\r\nimport Button from './components/ui/button';\r\n\r\nconst DotImageConverter = () => {\r\n  const [image, setImage] = useState(null);\r\n  const [resolution, setResolution] = useState(64);\r\n  const [dotSize, setDotSize] = useState(1);\r\n  const canvasRef = useRef(null);\r\n  const canvasSize = 512;\r\n\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        setImage(img);\r\n      };\r\n      img.src = event.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (image && canvasRef.current) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n      \r\n      canvas.width = canvasSize;\r\n      canvas.height = canvasSize;\r\n      \r\n      ctx.imageSmoothingEnabled = false;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      const tempCanvas = document.createElement('canvas');\r\n      tempCanvas.width = resolution;\r\n      tempCanvas.height = resolution;\r\n      const tempCtx = tempCanvas.getContext('2d');\r\n      tempCtx.drawImage(image, 0, 0, resolution, resolution);\r\n      \r\n      const imageData = tempCtx.getImageData(0, 0, resolution, resolution);\r\n      \r\n      const pixelSize = canvasSize / resolution;\r\n      \r\n      for (let y = 0; y < resolution; y++) {\r\n        for (let x = 0; x < resolution; x++) {\r\n          const i = (y * resolution + x) * 4;\r\n          ctx.fillStyle = `rgb(${imageData.data[i]},${imageData.data[i+1]},${imageData.data[i+2]})`;\r\n          \r\n          const drawSize = pixelSize * dotSize;\r\n          const offsetX = (pixelSize - drawSize) / 2;\r\n          const offsetY = (pixelSize - drawSize) / 2;\r\n          ctx.fillRect(x * pixelSize + offsetX, y * pixelSize + offsetY, drawSize, drawSize);\r\n        }\r\n      }\r\n    }\r\n  }, [image, resolution, dotSize]);\r\n\r\n  const handleExport = () => {\r\n    if (canvasRef.current) {\r\n      const link = document.createElement('a');\r\n      link.download = 'dot-image.png';\r\n      link.href = canvasRef.current.toDataURL();\r\n      link.click();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-md mx-auto\">\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} className=\"mb-4\" />\r\n      <div className=\"slider-container\">\r\n        <label>解像度: {resolution}x{resolution}</label>\r\n        <Slider\r\n          min={16}\r\n          max={256}\r\n          step={16}\r\n          value={resolution}\r\n          onChange={(e) => setResolution(parseInt(e.target.value))}\r\n        />\r\n      </div>\r\n      <div className=\"slider-container\">\r\n        <label>ドットサイズ: {dotSize.toFixed(2)}</label>\r\n        <Slider\r\n          min={0.1}\r\n          max={1}\r\n          step={0.05}\r\n          value={dotSize}\r\n          onChange={(e) => setDotSize(parseFloat(e.target.value))}\r\n        />\r\n      </div>\r\n      <canvas \r\n        ref={canvasRef} \r\n        className=\"border border-gray-300 mb-4\" \r\n        width={canvasSize} \r\n        height={canvasSize} \r\n        style={{ width: '100%', height: 'auto' }}\r\n      />\r\n      <Button onClick={handleExport}>画像を出力</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DotImageConverter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}